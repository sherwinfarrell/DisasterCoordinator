"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var Drift_Marker_1 = __importDefault(require("./Drift_Marker"));
var react_leaflet_1 = require("react-leaflet");
var DriftMarker = /** @class */ (function (_super) {
    __extends(DriftMarker, _super);
    function DriftMarker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DriftMarker.prototype.createLeafletElement = function (props) {
        var el = new Drift_Marker_1.default(props.position, this.getOptions(props));
        this.contextValue = __assign({}, props.leaflet, { popupContainer: el });
        return el;
    };
    DriftMarker.prototype.updateLeafletElement = function (fromProps, toProps) {
        if (toProps.position !== fromProps.position && typeof toProps.duration == 'number') {
            this.leafletElement.slideTo(toProps.position, {
                duration: toProps.duration,
                keepAtCenter: toProps.keepAtCenter
            });
        }
        if (toProps.icon !== fromProps.icon && toProps.icon) {
            this.leafletElement.setIcon(toProps.icon);
        }
        if (toProps.zIndexOffset !== fromProps.zIndexOffset && toProps.zIndexOffset !== undefined) {
            this.leafletElement.setZIndexOffset(toProps.zIndexOffset);
        }
        if (toProps.opacity !== fromProps.opacity && toProps.opacity !== undefined) {
            this.leafletElement.setOpacity(toProps.opacity);
        }
        if (toProps.draggable !== fromProps.draggable && this.leafletElement.dragging !== undefined) {
            if (toProps.draggable === true) {
                this.leafletElement.dragging.enable();
            }
            else {
                this.leafletElement.dragging.disable();
            }
        }
    };
    DriftMarker.prototype.render = function () {
        var children = this.props.children;
        return children == null || this.contextValue == null ? null : (react_1.default.createElement(react_leaflet_1.LeafletProvider, { value: this.contextValue }, children));
    };
    return DriftMarker;
}(react_leaflet_1.MapLayer));
exports.default = react_leaflet_1.withLeaflet(DriftMarker);
//# sourceMappingURL=DriftMarker.js.map